#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('ratkussofttz:server');
const http = require('http');
const md5 = require('md5');

const config = require('../config');
const mongoose = require('../db/mongoose');

let Admin = require('../db/models/admin');
/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

mongoose.connect(config.db.url, {useMongoClient: true})
    .then(
        () => {
            console.log('Successfully connected to database');
        },
        err => {
            throw err;
        }
    )
   /* .then(() => {
        return mongoose.connection.db.dropDatabase();
    })*/
    .then(() => {
        let adminObj = {
            username: config.db.admin.username,
            password : md5(config.db.admin.password)
        };
        return Admin.findOneAndUpdate({username: adminObj.username}, adminObj, {upsert : true})
            .then(() => console.log("CREATER - " + JSON.stringify(adminObj)))
    })
    .then(() => {
        server.listen(port);
        console.log('Listening on port ' + port);
        server.on('error', onError);
        server.on('listening', onListening);
    })
    .catch(err => {
        console.log(err);
        process.exit();
    });


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
